  
       subroutine precip_proc()

	implicit none
	include 'common.inc'
	include 'params.inc'

        integer i,j,k
        real autor, autos, accrr, accris, accrcs, accrig, accrcg
        real evap, dq, omn, omp, omg 
        real pows1, pows2, powg1, powg2, powr1, powr2, tmp
	real qii, qcc, qrr, qss, qgg
        real df(dimx1_s:dimx2_s, dimy1_s:dimy2_s, nzm)
	real f0(nzm),df0(nzm)

        powr1 = (3 + b_rain) / 4.
        powr2 = (5 + b_rain) / 8.
        pows1 = (3 + b_snow) / 4.
        pows2 = (5 + b_snow) / 8.
        powg1 = (3 + b_grau) / 4.
        powg2 = (5 + b_grau) / 8.
      
     
 
	do k=1,nzm
	 do j=1,ny
	  do i=1,nx	  
	  
c-------     In-Cloud processes: 

	   if(qn(i,j,k).gt.0.) then

   !    With Precipitating Water:

	        if(qp(i,j,k).gt.qp_threshold) then
     
        !  Warm Cloud:
                  if(tabs(i,j,k).ge.tbgmax)  then

	             qcc = qn(i,j,k) 
      	             if(qcc .gt. qcw0) then
      	               autor = alphaelq
!      	               autor = 500.*qcc*qcc   ! Berry Autoconversion (Nc=200)
      	             else
      	               autor = 0.
      	              endif 
                     omp = omegap(i,j,k)
                     qrr = qp(i,j,k) * omp
     	             accrr = accrrc(k) * qrr ** powr1
                     if(tabs(i,j,k).lt.tprmax) then      
                         omg = omegag(i,j,k)
                         qss = qp(i,j,k) * (1.-omp)*(1.-omg)
     	                 accrcs = accrsc(k) * qss ** pows1
                         qgg = qp(i,j,k) * (1.-omp)*omg
     	                 accrcg = accrgc(k) * qgg ** powg1
                     else
                         accrcs = 0.
		         accrcg = 0.
                     end if
                     qcc = (qcc+dtn*autor*qcw0)/
     &			  (1.+dtn*(accrr+accrcs+accrcg+autor))
	             dq = dtn *(accrr*qcc + autor*(qcc-qcw0)+
     &		                (accrcs+accrcg)*qcc )

    ! Ice Cloud:
	          else if(tabs(i,j,k).le.tbgmin) then  

	             qii = qn(i,j,k) 
      	             if(qii .gt. qci0) then
      	               autos = betaelq*coefice(k)
      	             else
      	               autos = 0.
      	             endif 
                     omp = omegap(i,j,k)
                     omg = omegag(i,j,k)
                     qss = qp(i,j,k) * (1.-omp)*(1.-omg)
     	             accris = accrsi(k) * qss ** pows1
	             if(tabs(i,j,k).gt.tgrmin) then
                       qgg = qp(i,j,k) * (1.-omp)*omg
     	               accrig = accrgi(k) * qgg ** powg1
	             else
	               accrig = 0.
	             end if
                     qii = (qii+dtn*autos*qci0)/
     &			(1.+dtn*(accris+accrig+autos))
	             dq = dtn *( (accris+accrig)*qii + autos*(qii-qci0))

    ! Mixed-Phase loud:
	           
	           else

                     omn = omegan(i,j,k)
	             qcc = qn(i,j,k) * omn
	             qii = qn(i,j,k) * (1.-omn)

      	             if(qcc .gt. qcw0) then
      	               autor = alphaelq
!      	               autor = 500.*qcc*qcc   ! Berry Autoconversion (Nc=200)
      	             else
      	               autor = 0.
      	             endif 
      	             if(qii .gt. qci0) then
      	               autos = betaelq*coefice(k)
      	             else
      	               autos = 0.
      	             endif 
                     omp = omegap(i,j,k)
                     if(t(i,j,k).gt.tprmin) then
                       qrr = qp(i,j,k) * omp
     	               accrr = accrrc(k) * qrr ** powr1
	             else
                       accrr = 0.
	             end if
                     omg = omegag(i,j,k)
                     qss = qp(i,j,k) * (1.-omp)*(1.-omg)
     	             tmp = qss ** pows1
     	             accrcs = accrsc(k) * tmp
     	             accris = accrsi(k) * tmp
                     qgg = qp(i,j,k) * (1.-omp)*omg
     	             tmp = qgg ** powg1
     	             accrcg = accrgc(k) * tmp
     	             accrig = accrgi(k) * tmp
                     qcc = (qcc+dtn*autor*qcw0)/
     &			  (1.+dtn*(accrr+accrcs+accrcg+autor))
                     qii = (qii+dtn*autos*qci0)/
     &			  (1.+dtn*(accris+accrig+autos))
	             dq = dtn *(accrr*qcc + autor*(qcc-qcw0)+
     &		        (accris+accrig)*qii + (accrcs+accrcg)*qcc +
     &                   autos*(qii-qci0))

	           end if

		   dq = min(dq,qn(i,j,k))
		   qp(i,j,k) = qp(i,j,k) + dq
	           q(i,j,k) = q(i,j,k) - dq
	           qn(i,j,k) = qn(i,j,k) - dq
	           qpsrc(k) = qpsrc(k) + dq


	        else 

                   omn = omegan(i,j,k)
	           qcc = qn(i,j,k) * omn
	           qii = qn(i,j,k) * (1.-omn)

      	           if(qcc .gt. qcw0) then
      	             autor = alphaelq
!      	             autor = 500.*qcc*qcc   ! Berry Autoconversion (Nc=200)
      	           else
      	             autor = 0.
      	           endif 
      	           if(qii .gt. qci0) then
      	             autos = betaelq*coefice(k)
      	           else
      	             autos = 0.
      	           endif 
                   qcc = (qcc+dtn*autor*qcw0)/(1.+dtn*autor)
                   qii = (qii+dtn*autos*qci0)/ (1.+dtn*autos)
	           dq = dtn *( autor*(qcc-qcw0)+autos*(qii-qci0))
		   dq = min(dq,qn(i,j,k))
		   qp(i,j,k) = qp(i,j,k) + dq
	           q(i,j,k) = q(i,j,k) - dq
	           qn(i,j,k) = qn(i,j,k) - dq
	           qpsrc(k) = qpsrc(k) + dq

	        end if ! qp(i,j,k).gt.qp_threshold


	   elseif(qp(i,j,k).gt.qp_threshold) then
	        
	        evap = 0.
	        if(tabs(i,j,k).gt.tprmin) then
                 qrr = qp(i,j,k) * omp
	         evap=evap+evapr1(k)*sqrt(qrr)+evapr2(k)*qrr**powr2
	        end if
	        if(tabs(i,j,k).lt.tprmax) then
                  omp = omegap(i,j,k)
                  omg = omegag(i,j,k)
                  qss = qp(i,j,k) * (1.-omp)*(1.-omg)
	          evap=evap+evaps1(k)*sqrt(qss)+evaps2(k)*qss**pows2
	          if(tabs(i,j,k).gt.tgrmin) then
                    qgg = qp(i,j,k) * (1.-omp)*omg
                    evap=evap+evapg1(k)*sqrt(qgg)+evapg2(k)*qgg**powg2
	          end if
	        end if
	        dq = dtn * evap *  (q(i,j,k) /qsat(i,j,k)-1.)
                dq = max(-0.5*qp(i,j,k),dq) 
                qp(i,j,k) = qp(i,j,k) + dq
                q(i,j,k) = q(i,j,k) - dq
	        qpevp(k) = qpevp(k) + dq

	   else
	
      	        qp(i,j,k)=max(0.,qp(i,j,k))
	        q(i,j,k) = q(i,j,k) + qp(i,j,k)
	        qp(i,j,k) = 0.
	        qpevp(k) = qpevp(k) - qp(i,j,k)

           endif

	  end do
	 enddo
	enddo
    


      return
      end

